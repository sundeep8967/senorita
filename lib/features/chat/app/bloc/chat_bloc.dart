import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:senorita/models/chat_message.dart';
import '../../domain/repositories/chat_repository.dart';

part 'chat_event.dart';
part 'chat_state.dart';

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  final ChatRepository _chatRepository;
  final FirebaseAuth _firebaseAuth;
  StreamSubscription<List<ChatMessage>>? _messagesSubscription;
  String? _roomId;
  String? _otherUserId;

  ChatBloc({
    required ChatRepository chatRepository,
    required FirebaseAuth firebaseAuth,
  })  : _chatRepository = chatRepository,
        _firebaseAuth = firebaseAuth,
        super(ChatInitial()) {
    on<ChatStarted>(_onChatStarted);
    on<ChatMessageSent>(_onChatMessageSent);
    on<_ChatMessagesReceived>(_onMessagesReceived);
  }

  Future<void> _onChatStarted(
    ChatStarted event,
    Emitter<ChatState> emit,
  ) async {
    emit(ChatLoadInProgress());
    _otherUserId = event.otherUserId;
    try {
      final roomId = await _chatRepository.getOrCreateChatRoom(event.otherUserId);
      _roomId = roomId;

      _messagesSubscription?.cancel();
      _messagesSubscription = _chatRepository.getMessagesStream(roomId).listen(
        (messages) {
          add(_ChatMessagesReceived(messages: messages));
        },
        onError: (error) {
          print('Error in message stream: $error');
          addError(error);
        },
      );
    } catch (e) {
      emit(ChatLoadFailure(error: 'Failed to start chat: ${e.toString()}'));
    }
  }

  void _onMessagesReceived(
    _ChatMessagesReceived event,
    Emitter<ChatState> emit,
  ) {
    emit(ChatLoadSuccess(messages: event.messages, roomId: _roomId!));
  }

  Future<void> _onChatMessageSent(
    ChatMessageSent event,
    Emitter<ChatState> emit,
  ) async {
    final currentUser = _firebaseAuth.currentUser;
    if (currentUser == null || _roomId == null || _otherUserId == null) {
      return;
    }

    final messageContent = event.message.trim();
    if (messageContent.isEmpty) {
      return;
    }

    final newMessage = ChatMessage(
      messageId: '', // Will be generated by Firestore
      senderId: currentUser.uid,
      receiverId: _otherUserId!,
      content: messageContent,
      timestamp: Timestamp.now(),
    );

    try {
      await _chatRepository.sendMessage(_roomId!, newMessage);
    } catch (e) {
      print('Error sending message: ${e.toString()}');
      // Optionally emit an error state to the UI
    }
  }

  @override
  Future<void> close() {
    _messagesSubscription?.cancel();
    return super.close();
  }
}
